def finite_difference_method():
    n = 10
    h = 0.1
    x = np.linspace(0, 1, n+1)
    
    # 構建矩陣 A 和向量 F
    A = np.zeros((n-1, n-1))
    F = np.zeros(n-1)
    
    for i in range(n-1):
        xi = x[i+1]
        p = -(xi + 1)
        q = 2
        r = (1 - xi**2) * np.exp(-xi)
        
        if i == 0:
            A[i, i] = 2 + h**2 * q
            A[i, i+1] = -1 + 0.5 * h * p
            F[i] = -h**2 * r + (1 + 0.5 * h * p) * 1  # y(0)=1
        elif i == n-2:
            A[i, i-1] = -1 - 0.5 * h * p
            A[i, i] = 2 + h**2 * q
            F[i] = -h**2 * r + (1 - 0.5 * h * p) * 2  # y(1)=2
        else:
            A[i, i-1] = -1 - 0.5 * h * p
            A[i, i] = 2 + h**2 * q
            A[i, i+1] = -1 + 0.5 * h * p
            F[i] = -h**2 * r
    
    y_inner = np.linalg.solve(A, F)
    y_fd = np.concatenate(([1], y_inner, [2]))
    return x, y_fd

x_fd, y_fd = finite_difference_method()
